Epi 2 =>

1. NPM is a package manager but not stands as node package manager
2. It has all the packages hoisted to use.
3. package.json is a configuration for NPM

* Webpack, parcel, beet are bundles which bundles/packages and minifies the code for production
* there are 2 types of dependencies one is dev dependency(-D) and the other one is normal which uses in production. 

* ^ carel icon in json files(ex "^2.8.0") means if any minor version update happend then the version in file also will be updated 
* ~ tilde icon in json files(ex "^2.8.0") means if any major version update happend then the version in file also will be updated automatically but this is not much suitable because it ca break thing
* package-lock-json is very important file, for example if in some case package.json's version got updated, so lock file keeps a track of it original versions. it keeps exact version of all the dependencies

* node modules - it contains all the dependencies called transative dependency. for example parcel install so parcel also will have dependencies. thats why node modules folder is heavy

* If we have package.json and package-lock-json file then node_module can be regenerated, and no need to push node_module in remote because it is heavy too and no use of it there.

* NPM command is for installing something, for example, npm install you r installing a package. and with npx means u r executing that package.
* cdn links are not good way to import react in the app as version can be changed, and we will have to do network call everytime,
* type="module"
* npx parcel build index.html for prod build

* #parcel
- it creates dev build
- local setup
- HMR - hot module replacement, it reads file
- it uses file watching algorithem
- it gives faster developemet and builds experience by caching
- image optimization
- it does minification, compression, for prod build
- consistent hashing
- code splitting
- differential bundling

read about parcel.org


Episode - 3

* npm run start/npm start is a same thing as behind the scene it executes npx parcel index.html command
* JSX is not an html or javascript it singly JSX which can be say a look-alike html
* JSX code does not directly understand by JS engine or browser. 1st it is complied by Parcel (parcel will take help of library called Babel) babel will transpile/converts code into the form which js engine or browser understands.
* read about babel documentation
* JSX (transpiled before it reaches the JS) - PARCEL - Babel
* JSX => Babel transpiles it to React.createElement => React.createElement-JS Object =>HTMLElement(render)
* Ascembeling two or more components together called components composition

Episode 4 

* passing a prop to a function is same as passing argument to the function
* when u have to dynamically passin the data to the component, u passin as a prop
* config driven UI, - our website is driven by website, or data, for example different cities shows differet datas(system design interview ques)
* what is optional chaining?

Episode 5-

* if u have single const to export then you can use, export default <name of the component> but if u have many const to export then in this case we need to use named export for example
export const abc = 'some url';
export const abc = 'some url';
Named export need to be imported under {} but in case of default export it can be imported normally

two types of export imports
 export deafult Component;
 import Component from "path";

 export const Component;
 import {Component} from "path";

 * why react is fast? - because it easily do dom maniplulation, effeciet dom maniplulation

 React Hooks-
 * react hook eod is js normal utility function, that function comes with may superpowers, logics

 * React used Reconciliation algorithem (also known as React fiber)
* virtual dom is representation of actual dom


actual dom
<div>
<img /> 
</div>


react element are virtual dom


Episode - 6

What is Monolithic and microServices

Monolithic is maintaining every services in one project like, BE FE UI Authentications, APIs. and many more, so when some change happens,
will have to deploy everything.

MicroServices - microServices are a individual services for each things, like BE FE or API, and it maintains a different structure, for each thing will
have separate project and this is knowns as separation of concerns and single responsibility project where everyone has their on JOb

MicroServices will have different ports, and it will make a call/redirects when needed

* There are two ways to render the data on the page.
1. page Loads -->  API call --> page render
                      |
                      ^
                   500ms wait to make a api call for example
In this approach, as soon as the page loads it will make an API call (which can may be take 5ms) to render the data, and till that time page might be blank.

2. page Loads --> render(may be skeleton or whatever we have) ---> API call --> page render
In this approach as soon as the page loads, we will render the skeleton or whatever we have on the page and meanwhile API call happens we will re-render the page with correct data.
this gives u good UX

* useState -  to manage state variables
* useEffect - which takes 2 arguments, 1st one is callback function and another one is dependency.
- so when will callback function will be called?
 ans - so once ur component renders and rendering cycle has been finished, after this callback function will be called

* CORS -  cors policy is blocker given by chrome, if we try to access api in local and which is not allowed so chrome will give us CORS policy error.
* Read about CORS and optional chaining?

* useState - useState takes 2 parameter one is local state variable and another one will be to update the local variable. as soon as it recieves a update
it quickly refreshes/re-renders that component

* Whenever state variable update, react triggers a Reconciliation(re-renders the component)

* what is CORS -  so before when some web app was trying to fetch/get access to the data from another web app, so it was not allowed, then CORS mechanism came into the play.

-so web app A will 1st make a preflight optional call to B, if b verifies that preflight call so it will send additional http headers to A, which will client client knows ok this is safe and then actuall call will be made
- additional headers -  accept-control-allow-origin

* optional chaining - operator ? it allowes u to access the element of an oject or element of an array without giving u the error even if does not exits
it will give u undefined

